[
  {
    "objectID": "content/01_journal/01_tidyverse.html",
    "href": "content/01_journal/01_tidyverse.html",
    "title": "Tidyverse",
    "section": "",
    "text": "#Sales Analysis, Tidyverse Challenge\n\n\n1 Libraries\nLoad the following libraries.\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(readxl)\n\n\n2 Import Files\n\nbikes_tbl &lt;- read_excel(path = \"./../../00_data/01_raw_data/bikes.xlsx\")\norderlines_tbl &lt;- read_excel(\"./../../00_data/01_raw_data/orderlines.xlsx\")\n\n#&gt; New names:\n#&gt; • `` -&gt; `...1`\n\nbikeshops_tbl  &lt;- read_excel(\"./../../00_data/01_raw_data/bikeshops.xlsx\")\n\n#joining data\n\nbike_orderlines_joined_tbl &lt;- orderlines_tbl %&gt;%\n  left_join(bikes_tbl, by = c(\"product.id\" = \"bike.id\")) %&gt;%\n  left_join(bikeshops_tbl, by = c(\"customer.id\" = \"bikeshop.id\"))\n\n#wrangling data\n\nbike_orderlines_wrangled_tbl &lt;- bike_orderlines_joined_tbl %&gt;% \n  separate(col = location, \n           into = c(\"City\",\"State\"),\n           sep = \",\") %&gt;%\n  mutate(total.price = price * quantity) %&gt;%\n  select(-...1,-gender) %&gt;%\n  select(-ends_with(\".id\")) %&gt;%\n  bind_cols(bike_orderlines_joined_tbl %&gt;% select(order.id)) %&gt;% \n  select(order.id, contains(\"order\"), contains(\"model\"), contains(\"category\"),\n         price, quantity, total.price,\n         everything()) %&gt;%\n  rename(bikeshop = name) %&gt;%\n  set_names(names(.) %&gt;% str_replace_all(\"\\\\.\", \"_\"))\n\n\n3 Manipulation of data (sales by state)\n\nlibrary(lubridate)\n\nsales_by_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(State,total_price) %&gt;%\n  group_by(State) %&gt;%\n  summarize(sales = sum(total_price)) %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\nsales_by_state_tbl\n\n\n\n  \n\n\n\n\n4 Visualize sales by state data\n\nsales_by_state_tbl %&gt;% ggplot(aes(x = State, y =sales)) +\n  geom_col(fill = \"#2DC6D6\") + \n  geom_label(aes(label = sales_text)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\")) +\n  labs(\n    title    = \"Revenue by State\",\n    subtitle = \"State wise trend of sales\",\n    x = \"\", # Override defaults for x and y\n    y = \"Revenue\"\n  )\n\n#&gt; `geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n#Manipulate sales by state and location data\n\nsales_by_year_state_tbl &lt;- bike_orderlines_wrangled_tbl %&gt;%\n  select(order_date,total_price,State) %&gt;%\n  mutate(year = year(order_date)) %&gt;%\n  group_by(year,State) %&gt;%\n  summarise(sales = sum(total_price)) %&gt;% \n  ungroup() %&gt;%\n  mutate(sales_text = scales::dollar(sales, big.mark = \".\", \n                                     decimal.mark = \",\", \n                                     prefix = \"\", \n                                     suffix = \" €\"))\n\n#&gt; `summarise()` has grouped output by 'year'. You can override using the\n#&gt; `.groups` argument.\n\nsales_by_year_state_tbl\n\n\n\n  \n\n\n\n\n5 Visualize sales by state data\n\nsales_by_year_state_tbl %&gt;% ggplot(aes(x = year, y = sales, fill = State)) + \n  geom_col() +\n  facet_wrap(~ State) +\n  scale_y_continuous(labels = scales::dollar_format(big.mark = \".\", \n                                                    decimal.mark = \",\", \n                                                    prefix = \"\", \n                                                    suffix = \" €\"))+\n  labs(\n    title = \"Revenue by year and state\",\n    subtitle = \"Each state different sales trend\",\n    fill = \"State\" \n  )"
  },
  {
    "objectID": "content/01_journal/02_data_acquisition.html",
    "href": "content/01_journal/02_data_acquisition.html",
    "title": "Data Acquisition",
    "section": "",
    "text": "#Challenge 1 #get top 10 rated movies from imdb\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(httr)\nlibrary(rvest)\n\n#&gt; \n#&gt; Attaching package: 'rvest'\n#&gt; \n#&gt; The following object is masked from 'package:readr':\n#&gt; \n#&gt;     guess_encoding\n\n\n#import files\n\nurl  &lt;- \"https://www.imdb.com/chart/top/\"\nresp &lt;- GET( url = \"https://www.imdb.com/chart/top/\",  \n            add_headers('Accept-Language' = \"en-US, en;q=0.5\"))\nimdb_html &lt;- content(resp)\n\n#Get movie titles\n\ntitle_tbl &lt;- read_html(url) %&gt;% \nhtml_nodes(css=\".titleColumn &gt; a\") %&gt;%\nhtml_text() %&gt;%\nhead(10)\n\n\nrank_tbl &lt;- read_html(url) %&gt;%\nhtml_nodes(css=\".titleColumn\") %&gt;%\nhtml_text() %&gt;%\nhead(10) %&gt;%\nstringr::str_extract(\"(?&lt;= )[0-9]*(?=\\\\.\\\\n)\")%&gt;% \nas.numeric()\n\n\ntop10_movies &lt;- tibble(rank = rank_tbl,title = title_tbl)\n\n\ntop10_movies\n\n\n\n  \n\n\n\n#Challenge 2\n#Load Libraries —\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(glue)\nlibrary(xml2)\n\n\nhome_url &lt;- \"https://www.rosebikes.com\"\nhome_html &lt;- read_html(\"https://www.rosebikes.com/bikes/\")\n\n\nbike_family_tbl &lt;- home_html %&gt;%\n  html_nodes(css = \".catalog-navigation__link\") %&gt;%\n  html_attr(\"href\") %&gt;%\n  str_replace_all(\"^/\", \"https://www.rosebikes.com/\") %&gt;%\n  as_tibble() %&gt;%\n  rename(\"mtburl\" = value)\n\n#moutain bikes table\n\nmtb_url &lt;- read_html(bike_family_tbl$mtburl[1]) %&gt;%\n  html_nodes(css = \".catalog-category-bikes__picture-wrapper--left\") %&gt;%\n  html_attr(\"href\") %&gt;%\n  {glue(\"https://www.rosebikes.com{.}\")} %&gt;%\n  as_tibble() %&gt;%\n  rename(URL = value)\n\n#Names of count solo mtb tyes\n\nname_tbl &lt;- read_html(mtb_url$URL[1]) %&gt;%\n  html_nodes(css = \".basic-headline.basic-headline--no-margin.basic-headline--small.basic-headline--left .basic-headline__title\") %&gt;%\n  html_text() \n\n#Price of count solo bike type\n\nprice_tbl &lt;- read_html(mtb_url$URL[1]) %&gt;%\nhtml_nodes(css = \".product-tile-price__current.catalog-category-model__price-current .product-tile-price__current-value.catalog-category-model__price-current-value\") %&gt;%\nhtml_text() %&gt;%\ngsub(\"[^0-9.-]\",\"\",.)\n\n#Tibble Format\n\ncount_solo_tbl &lt;- tibble(name = name_tbl, price = price_tbl)\n\n\ncount_solo_tbl"
  },
  {
    "objectID": "content/01_journal/03_data_wrangling.html",
    "href": "content/01_journal/03_data_wrangling.html",
    "title": "Data Wrangling",
    "section": "",
    "text": "library(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(vroom)\nlibrary(data.table)\n\n#&gt; \n#&gt; Attaching package: 'data.table'\n#&gt; \n#&gt; The following objects are masked from 'package:lubridate':\n#&gt; \n#&gt;     hour, isoweek, mday, minute, month, quarter, second, wday, week,\n#&gt;     yday, year\n#&gt; \n#&gt; The following objects are masked from 'package:dplyr':\n#&gt; \n#&gt;     between, first, last\n#&gt; \n#&gt; The following object is masked from 'package:purrr':\n#&gt; \n#&gt;     transpose\n\n\n#Loading files\n\npatent_url &lt;- \"./../../Patent_data_reduced/patent.tsv\"\npatent_dt &lt;- fread(patent_url)\nclass(patent_dt)\n\n#&gt; [1] \"data.table\" \"data.frame\"\n\npatent_assignee &lt;- \"./../../Patent_data_reduced/patent_assignee.tsv\"\npatent_assignee_dt &lt;- fread(patent_assignee)\nclass(patent_assignee_dt)\n\n#&gt; [1] \"data.table\" \"data.frame\"\n\nassignee_url &lt;- \"./../../Patent_data_reduced/assignee.tsv\"\nassignee_dt &lt;- fread(assignee_url)\nclass(assignee_dt)\n\n#&gt; [1] \"data.table\" \"data.frame\"\n\nuspc_url &lt;- \"./../../Patent_data_reduced/uspc.tsv\"\nuspc_dt &lt;- fread(uspc_url)\n\n#Challenge 1 List 10 us Companies with most patents\n\ncombined_data &lt;- merge(patent_assignee_dt, assignee_dt, by.x=\"assignee_id\", by.y =\"id\")\ntop10_us_company &lt;- combined_data %&gt;%\n  filter(type == 2) %&gt;%\n  group_by(organization) %&gt;%\n  summarize(patent_count = n()) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(patent_count))\n\n\ntop10_us_company\n\n\n\n  \n\n\n\n#Challenge 2 - List top 10 companies with August 2014\n\naug_dt &lt;- patent_dt[month(date) == 8 & year(date) == 2014]\n  \ncombined_data &lt;- merge(merge(aug_dt,patent_assignee_dt, by.x=\"id\",by.y=\"patent_id\"),assignee_dt, by.x=\"assignee_id\",by.y=\"id\")\n\ntop10_us_company &lt;- combined_data %&gt;%\n  filter(type == 2) %&gt;%\n  group_by(organization) %&gt;%\n  summarize(patent_count = n()) %&gt;%\n  ungroup() %&gt;%\n  arrange(desc(patent_count))\n\n\ntop10_us_company\n\n\n\n  \n\n\n\n#Challenge3 - List top 5 most innovatiove companies\n\ncombined_data &lt;- merge(patent_assignee_dt,assignee_dt,by.x=\"assignee_id\",by.y=\"id\")\n\ncompany_patents &lt;- combined_data %&gt;%\nfilter(!(is.na(organization))) %&gt;%\ngroup_by(organization) %&gt;%\nsummarize(patent_count = n()) %&gt;%\nungroup() %&gt;%\narrange(desc(patent_count)) %&gt;% \nhead(10)\n\ntop_10_companies &lt;- head(company_patents, 10)$organization\n\nfiltered_data &lt;- combined_data[organization %in% top_10_companies]\n\nfiltered_uspc &lt;- merge(filtered_data, uspc_dt, by.x = \"patent_id\", by.y = \"patent_id\")\n\ntop_main_classes &lt;- filtered_uspc %&gt;%\n  group_by(mainclass_id) %&gt;%\n  summarize(occurrences = n()) %&gt;%\n  arrange(desc(occurrences)) %&gt;%\n  head(5)\n\n\ntop_main_classes"
  },
  {
    "objectID": "content/01_journal/04_data_visualization.html",
    "href": "content/01_journal/04_data_visualization.html",
    "title": "Data Visualization",
    "section": "",
    "text": "#Challenge 1 #Load Libraries\n\nlibrary(tidyverse)\n\n#&gt; ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n#&gt; ✔ dplyr     1.1.1     ✔ readr     2.1.4\n#&gt; ✔ forcats   1.0.0     ✔ stringr   1.5.0\n#&gt; ✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n#&gt; ✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n#&gt; ✔ purrr     1.0.1     \n#&gt; ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n#&gt; ✖ dplyr::filter() masks stats::filter()\n#&gt; ✖ dplyr::lag()    masks stats::lag()\n#&gt; ℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lubridate)\nlibrary(ggthemes)\n\n\ncovid_data_tbl &lt;- read_csv(\"https://covid.ourworldindata.org/data/owid-covid-data.csv\") %&gt;%\n filter(location %in% c(\"Germany\",\"United States\", \"India\",\"Spain\")) %&gt;%\n filter(!is.na(total_cases)) %&gt;%\n filter(date &lt; \"2023-05-15\") %&gt;%\n ungroup()\n\n#&gt; Rows: 311581 Columns: 67\n#&gt; ── Column specification ────────────────────────────────────────────────────────\n#&gt; Delimiter: \",\"\n#&gt; chr   (4): iso_code, continent, location, tests_units\n#&gt; dbl  (62): total_cases, new_cases, new_cases_smoothed, total_deaths, new_dea...\n#&gt; date  (1): date\n#&gt; \n#&gt; ℹ Use `spec()` to retrieve the full column specification for this data.\n#&gt; ℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n#plotting\n\ncovid_data_tbl %&gt;% ggplot(aes(x=date, y = total_cases, color = location)) +\ngeom_line() +\n  labs(\n    title = \"Global Total Cases over Time\",\n    subtitle = \"Grouped by country\",\n    x = \"Year\",\n    y = \"Total Covid Cases\"\n  ) +\n  theme_grey()\n\n\n\n\n\n\n\n#Challenge 2\n\ncovid_mortality_tbl &lt;- covid_data_tbl %&gt;%\nmutate(mortality_rate = total_deaths / population)\n\nworld &lt;- map_data(\"world\")\n\n\ncovid_mortality_tbl %&gt;%\n  filter(date == \"2023-05-01\") %&gt;%\n  ggplot(aes(mortality_rate)) +\n  geom_map(aes(fill = mortality_rate, map_id = location), map = world) +\n  expand_limits(x = world$long, y = world$lat) +\n  coord_map(\"moll\") +\n  scale_fill_gradient2(low = \"green\", mid = \"grey\", high = \"red\", midpoint = 0.003) +\n  labs(\n    title = \"Mortality Rate by Country\",\n    subtitle = \"grouped by country\",\n    x = \"\",\n    y = \"\"\n  ) +\n  theme_map()"
  },
  {
    "objectID": "content/02_notes/05_class_notes.html",
    "href": "content/02_notes/05_class_notes.html",
    "title": "Class Notes",
    "section": "",
    "text": "IMPORTANT: You can delete everything in here and start fresh. You might want to start by not deleting anything above this line until you know what that stuff is doing.\nThis is an .qmd file. It is plain text with special features. Any time you write just like this, it will be compiled to normal text in the website. If you put a # in front of your text, it will create a top level-header."
  },
  {
    "objectID": "content/03_other/06_links.html",
    "href": "content/03_other/06_links.html",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual .\n\n\n\n\nGoogle is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  },
  {
    "objectID": "content/03_other/06_links.html#r-and-r-studio",
    "href": "content/03_other/06_links.html#r-and-r-studio",
    "title": "Links",
    "section": "",
    "text": "R is a free open-source programming language that can be used for statistical analysis, data-simulation, graphing, and lots of other stuff. Another free program is R-studio, that provides a nice graphic interface for R. Download R first, then download R-studio. Both can run on PCs, Macs or Linux. Students will be learning R in the stats labs using the lab manual ."
  },
  {
    "objectID": "content/03_other/06_links.html#additional-r-resources",
    "href": "content/03_other/06_links.html#additional-r-resources",
    "title": "Links",
    "section": "",
    "text": "Google is great, Google your problem\nStackoverflow is great, google will often take you there because someone has already asked your question, and someone else has answered, usually many people have answered your question many ways."
  }
]